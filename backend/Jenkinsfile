pipeline {
    agent any
    environment {
        REPO_URL = 'https://github.com/xid2019/iMIS.git'
        ECR_URI = '692859903719.dkr.ecr.us-east-2.amazonaws.com/ecr-repo'
        AWS_REGION = 'us-east-2'
        EKS_CLUSTER = 'django-cluster'
        NAMESPACE = 'default'
        HELM_RELEASE = 'django-app'
        IMAGE_TAG = "${env.BUILD_ID}"
    }
    parameters {
        string(name: 'ROLLBACK_TO', defaultValue: '', description: 'Specify a release revision to rollback to (leave empty for no rollback)')
    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: "${REPO_URL}"
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding', 
                        credentialsId: 'aws-credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) 
                    {
                        sh '''
                        echo "Logging into ECR..."
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI
        
                        echo "Building Docker image..."
                        docker build -t django-app:$IMAGE_TAG -f backend/Dockerfile backend/
        
                        echo "Tagging Docker image..."
                        docker tag django-app:$IMAGE_TAG $ECR_URI:django-app-$IMAGE_TAG
        
                        echo "Pushing Docker image to ECR..."
                        docker push $ECR_URI:django-app-$IMAGE_TAG
        
                        echo "Docker image pushed successfully."
                        '''
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding', 
                        credentialsId: 'aws-credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) 
                    {
                        // Configure kubectl to use the EKS cluster
                        sh '''
                        echo "Configuring kubectl for EKS..."
                        aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER

                        echo "Deploying with Helm..."
                        helm upgrade --install ${HELM_RELEASE} ./path/to/your/chart --namespace ${NAMESPACE} --set image.repository=$ECR_URI --set image.tag=django-app-$IMAGE_TAG

                        echo "Deployment to EKS completed."
                        '''
                    }
                }
            }
        }

        stage('Post-Deployment Verification') {
            steps {
                echo 'Deployment successful. Verifying application...'
                // Add verification logic here, such as running tests
            }
        }
    }
    post {
        always {
            cleanWs() // Clean workspace
        }
        success {
            echo 'Pipeline executed successfully.'
        }
        failure {
            echo 'Pipeline failed. Rollback triggered...'
            script {
                // Optionally handle rollback on failure if not done in the deploy stage
                sh "helm rollback ${HELM_RELEASE} --namespace ${NAMESPACE}"
            }
        }
    }
}